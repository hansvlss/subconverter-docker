name: build

on:
  workflow_dispatch:
    inputs:
      sc_ver:
        description: "subconverter release tag (e.g. v0.9.0)"
        required: false
        default: "v0.9.0"
      push_latest:
        description: "Also push :latest tag?"
        type: boolean
        required: false
        default: true
  push:
    branches: [ main, master ]

permissions:
  contents: read
  packages: write

env:
  IMAGE_NAME: ghcr.io/${{ github.repository_owner }}/subconverter
  SC_VER: ${{ inputs.sc_ver || 'v0.9.0' }}
  PLATFORMS: linux/amd64,linux/arm64

jobs:
  docker:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Prepare build context (generate Dockerfile & files)
        shell: bash
        run: |
          set -euxo pipefail
          mkdir -p ctx/vendor ctx/rootfs/etc/subconverter

          # --------- entrypoint ----------
          cat > ctx/entrypoint.sh <<'SH'
          #!/usr/bin/env sh
          set -eu
          : "${SC_PORT:=25500}"
          : "${SC_ADDR:=0.0.0.0}"
          : "${SC_ARGS:=}"
          BIN="/opt/subconverter/subconverter"
          if [ ! -x "$BIN" ]; then
            echo "subconverter binary not found at $BIN" >&2
            ls -al /opt/subconverter || true
            exit 1
          fi
          exec "$BIN" -localaddr "${SC_ADDR}:${SC_PORT}" $SC_ARGS
          SH
          chmod +x ctx/entrypoint.sh

          # --------- default config (可选) ----------
          cat > ctx/rootfs/etc/subconverter/pref.ini <<'INI'
          [common]
          api_access = true
          port = 25500
          INI

          # --------- .dockerignore ----------
          cat > ctx/.dockerignore <<'IGNORE'
          .git
          .github
          **/.DS_Store
          IGNORE

          # --------- Dockerfile ----------
          cat > ctx/Dockerfile <<'DOCKER'
          FROM alpine:3.20
          ARG TARGETARCH
          ARG SC_HOME=/opt/subconverter
          RUN set -eux; \
              apk add --no-cache ca-certificates tzdata bash unzip curl libstdc++; \
              adduser -D -h /home/app app; \
              mkdir -p ${SC_HOME}
          # 复制 vendor 包（由 workflow 准备）
          COPY vendor/ /tmp/vendor/
          # 解包（支持 .tar.gz 与 .zip）
          RUN set -eux; \
              case "${TARGETARCH}" in \
                amd64)  ARCH=linux64 ;; \
                arm64)  ARCH=linuxarm64 ;; \
                *) echo "Unsupported TARGETARCH: ${TARGETARCH}"; exit 1 ;; \
              esac; \
              PKG="/tmp/vendor/subconverter_${ARCH}.tar.gz"; \
              [ -f "$PKG" ] || PKG="/tmp/vendor/subconverter_${ARCH}.zip"; \
              [ -f "$PKG" ] || (echo "vendor package missing"; ls -al /tmp/vendor; exit 2); \
              echo ">>> using package: $PKG"; file "$PKG" || true; \
              case "$PKG" in \
                *.zip)    unzip -q "$PKG" -d "${SC_HOME}" ;; \
                *.tar.gz) tar -xzf "$PKG" -C  "${SC_HOME}" ;; \
                *) echo "Unknown package type: $PKG"; exit 3 ;; \
              esac; \
              # 某些发行包会多一层目录，扁平化
              if [ -d "${SC_HOME}/subconverter" ]; then \
                mv "${SC_HOME}/subconverter/"* "${SC_HOME}/" && rmdir "${SC_HOME}/subconverter"; \
              fi; \
              [ -x "${SC_HOME}/subconverter" ] || (echo "binary not found"; ls -al "${SC_HOME}"; exit 4); \
              chown -R app:app "${SC_HOME}"
          COPY entrypoint.sh /entrypoint.sh
          COPY rootfs/ /
          EXPOSE 25500
          USER app
          ENV SC_PORT=25500 SC_ADDR=0.0.0.0
          ENTRYPOINT ["/entrypoint.sh"]
          DOCKER

      - name: Prepare vendor (download release assets)
        shell: bash
        run: |
          set -euxo pipefail
          cd ctx
          mkdir -p vendor
          SC_VER="${SC_VER:-v0.9.0}"
          BASE1="https://github.com/tindy2013/subconverter/releases/download/${SC_VER}"
          BASE2="https://download.fastgit.org/tindy2013/subconverter/releases/download/${SC_VER}"
          BASE3="https://downloads.sourceforge.net/project/subconverter/${SC_VER}"

          for ARCH in linux64 linuxarm64; do
            OUT=""
            for NAME in "subconverter_${ARCH}.tar.gz" "subconverter_${ARCH}.zip"; do
              for BASE in "$BASE1" "$BASE2" "$BASE3"; do
                URL="${BASE}/${NAME}"
                echo ">>> try: ${URL}"
                if curl -fsSL --retry 5 -o "vendor/${NAME}" "${URL}"; then
                  OUT="vendor/${NAME}"
                  break 2
                fi
              done
            done
            if [ -z "$OUT" ]; then
              echo "!!! all download candidates failed for ${ARCH}"
              exit 10
            fi
            case "$OUT" in
              *.tar.gz) EXT=".tar.gz" ;;
              *.zip)    EXT=".zip" ;;
              *) echo "!!! unknown extension for $OUT"; file "$OUT" || true; exit 11 ;;
            esac
            TARGET="vendor/subconverter_${ARCH}${EXT}"
            if [ "$OUT" != "$TARGET" ]; then mv "$OUT" "$TARGET"; fi
            echo ">>> saved: $TARGET"
            file "$TARGET" || true
          done

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Compute tags
        id: meta
        shell: bash
        run: |
          set -euo pipefail
          VER="${SC_VER#v}"
          echo "ver=${VER}" >> "$GITHUB_OUTPUT"
          TAGS="${IMAGE_NAME}:${VER}"
          if [ "${{ inputs.push_latest || 'true' }}" = "true" ]; then
            TAGS="${TAGS},${IMAGE_NAME}:latest"
          fi
          echo "tags=${TAGS}" >> "$GITHUB_OUTPUT"

      - name: Build & Push (multi-arch)
        uses: docker/build-push-action@v6
        with:
          context: ctx
          file: ctx/Dockerfile
          platforms: ${{ env.PLATFORMS }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          build-args: |
            SC_VER=${{ env.SC_VER }}

      - name: Upload debug artifacts on failure
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: debug-artifacts
          path: |
            ctx/**
